// Config.groovy

// The CURRENT Context - MUST match a key from cma.dataContexts map below -> TARGET | Rembrandt | TCGA | TCGAOvarian
// EDIT THIS line to configure your builds context
cma.dataContext="__CMA_CONTEXT__"
cma.deployedTo = "__TIER__"; //localhost, dev, etc  (really only cares about 'local')

//All Available Contexts
cma.dataContexts =  [
	'Rembrandt' : [
		displayName:'Rembrandt',
		authenticationManagerContext:'rembrandt',
		propertiesFile:'cma-rembrandt.properties',
		username:'__REMBRANDT_DB_USERNAME__',
		password:'__REMBRANDT_DB_PASSWORD__',
		url:"__REMBRANDT_DB_URL__"
	],
	'TCGA' : [
		displayName:'TCGA GBM',
		authenticationManagerContext:'cma',
		propertiesFile:'cma-tcga.properties',
		username:'__TCGA_DB_USERNAME__',
		password:'__TCGA_DB_PASSWORD__',
		url:"__TCGA_DB_URL__"
	],
	'TCGAOvarian' : [
		displayName:'TCGA Ovarian',
		authenticationManagerContext:'cma',
		propertiesFile:'cma-tcgaovarian.properties',
		username:'__TCGAOV_DB_USERNAME__',
		password:'__TCGAOV_DB_PASSWORD__',
		url:"__TCGAOV_DB_URL__"
	],
	'TARGET' : [
		displayName:'Target ALL',
		authenticationManagerContext:'target',
		propertiesFile:'cma-target.properties',
		username:'__TARGET_DB_USERNAME__',
		password:'__TARGET_DB_PASSWORD__',
		url:"__TARGET_DB_URL__"
	]
]


// -------------------- Probably wont ever need to edit below this line ----------------------
propertiesFilePath = cma.deployedTo=='localhost' ? "C:\\local\\content\\cma\\config\\"  : "/local/content/cma/config/";
cma.appPropertiesFile = propertiesFilePath + cma.dataContexts[cma.dataContext].propertiesFile
cma.commonAppPropertiesFile = propertiesFilePath + "cma-all.properties"
cma.authenticationManagerContext=cma.dataContexts[cma.dataContext].authenticationManagerContext

grails.config.locations = ["file:${cma.commonAppPropertiesFile}", "file:${cma.appPropertiesFile}" ]

dataSource {
  configClass = GrailsAnnotationConfiguration.class
  pooled = false
  driverClassName = "oracle.jdbc.driver.OracleDriver"
  username = cma.dataContexts[cma.dataContext].username
  password = cma.dataContexts[cma.dataContext].password
  url = cma.dataContexts[cma.dataContext].url
  
  pooled = true
  dbCreate = "update"
  
  dialect = "org.hibernate.dialect.Oracle9Dialect"
  logSql = false
}

grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format
grails.mime.types = [ html: ['text/html','application/xhtml+xml'],
                      xml: ['text/xml', 'application/xml'],
                      text: 'text-plain',
                      js: 'text/javascript',
                      rss: 'application/rss+xml',
                      atom: 'application/atom+xml',
                      css: 'text/css',
                      csv: 'text/csv',
                      all: '*/*',
                      json: ['application/json','text/json'],
                      form: 'application/x-www-form-urlencoded',
                      multipartForm: 'multipart/form-data'
                    ]
// The default codec used to encode data with ${}
grails.views.default.codec="none" // none, html, base64
grails.views.gsp.encoding="UTF-8"
grails.converters.encoding="UTF-8"

// enabled native2ascii conversion of i18n properties files
grails.enable.native2ascii = true


// log4j configuration
log4j {
    appender.stdout = "org.apache.log4j.ConsoleAppender"
    appender.'stdout.layout'="org.apache.log4j.PatternLayout"
    appender.'stdout.layout.ConversionPattern'='[%r] %c{2} %m%n'
    appender.errors = "org.apache.log4j.FileAppender"
    appender.'errors.layout'="org.apache.log4j.PatternLayout"
    appender.'errors.layout.ConversionPattern'='[%r] %c{2} %m%n'
    appender.'errors.File'="stacktrace.log"
    rootLogger="error,stdout"
    logger {
        grails="error"
        StackTrace="error,errors"
        org {
            codehaus.groovy.grails.web.servlet="error"  //  controllers
            codehaus.groovy.grails.web.pages="error" //  GSP
            codehaus.groovy.grails.web.sitemesh="error" //  layouts
            codehaus.groovy.grails."web.mapping.filter"="error" // URL mapping
            codehaus.groovy.grails."web.mapping"="error" // URL mapping
            codehaus.groovy.grails.commons="info" // core / classloading
            codehaus.groovy.grails.plugins="error" // plugins
            codehaus.groovy.grails.orm.hibernate="error" // hibernate integration
            springframework="off"
            hibernate="off"
        }
        gov {
        	nih.nci.caintegrator="debug"   
        	nih.nci.cma="debug"
        }
      
    }
    additivity.StackTrace=true
}


